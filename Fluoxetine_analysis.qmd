---
title: "Fluoxetine PLATCOV"
author: "James Watson and Phrutsamon Wongnak"
format: pdf
editor: visual
---

```{r}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)
library(grid)
library(loo)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = c(5.5, 8)
study_threshold = 1.2
RUN_MODELS = F

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

## Load data

Set up analysis

```{r}
intervention = 'Fluoxetine' # prefix of analysis file
ref_arm = 'No study drug'
```

```{r load_data}
#| echo: false
# set as file with relevant dataset
itt_population_all = read.csv('ITT_population.csv')

f_name = paste0(intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)

if(!all(platcov_dat$ID %in% itt_population_all$ID)) stop('IDs do not match ITT population')

writeLines(sprintf('Missing patients in %s arm:',trt_intervention))
ind = itt_population_all$Treatment%in%trt_intervention &
  !itt_population_all$ID %in% platcov_dat$ID

itt_population_all$ID[ind]
itt_population_all$Treatment[ind]
# interventions
if(length(trt_intervention)==0) stop('no interventions!')
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

```{r}
platcov_dat$VariantClass_new <- as.character(platcov_dat$Variant)
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BA.5.2", "BA.5.5", "BQ.1")] <- "BA.5"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BN.1.2", "BN.1.3", "CH.1.1")] <- "BA.2.75"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("XBB1.5-like with F456L")] <- "XBB.1.5-like"
platcov_dat$VariantClass_new <- as.factor(platcov_dat$VariantClass_new)
```

```{r}
trt_colors = get_trt_colors()
```

## Baseline characteristics

```{r}
#| echo: false
platcov_dat = platcov_dat %>% ungroup() %>%
  mutate(Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) ) %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant)#normalise
         )  %>%
  ungroup() %>%
  mutate(trt_color = trt_colors[as.character(Trt)]) 

Baseline_data = platcov_dat %>% ungroup() %>% 
  distinct(ID, .keep_all = T) %>%
  filter(Timepoint_ID==0) %>% 
  mutate(Baseline.viral.load = daily_VL)


tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'Sex','BMI', "Weight", "Baseline.viral.load", 
                    "VariantClass_new",'Symptom_onset','Vaccinated','Fever_Baseline'),
    total_col = T, # add column with statistics for the whole sample
    add_row_total = F, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics in mITT population",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
```

## Fit models

```{r}
#| echo: false
source('priors.R')

covs_base = c('Study_time','Site', 'VariantClass_new')
covs_full=c(covs_base, 'Age_scaled','Symptom_onset','N_dose')

# Analysis data
platcov_dat_analysis_list = list()
stan_inputs = list()

for(i in 1:length(Dmax)){
  platcov_dat_analysis_list[[i]] = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax[i], mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 
  
writeLines(sprintf('Analysis dataset for follow-up duration of %s days contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   max(floor(platcov_dat_analysis_list[[i]]$Time)),
                   length(unique(platcov_dat_analysis_list[[i]]$ID)),
                   nrow(platcov_dat_analysis_list[[i]]),
                   sum(platcov_dat_analysis_list[[i]]$CT_NS<40),
                   round(100*mean(platcov_dat_analysis_list[[i]]$CT_NS<40))))

stan_inputs[[i]] = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis_list[[i]],
                   int_covs_base = covs_base,
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   Dmax = Dmax[i])
  
}
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

model_settings = expand.grid(mod = all_mods,
                             prior = 1:2,
                             cov_matrices = 1:2, 
                             dataset = 1:2)

model_settings$Niter = 4000
model_settings$Nwarmup = 2000
model_settings$Nthin = 4
model_settings$Nchain = 4

model_settings$intervention <- intervention

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis_list,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
mITT_ID_fluoxetine <- as.data.frame(unique(platcov_dat_analysis_list[[1]]$ID))
colnames(mITT_ID_fluoxetine) <- "ID"
write.csv(mITT_ID_fluoxetine, "mITT_ID_fluoxetine.csv", row.names = F)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = paste0(intervention, ".RData"))
ff = ff[grep(pattern = 'model_fits_',x = ff)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

# Main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])

#model_cols = brewer.pal(n = nrow(model_settings), name = 'Set1')
#names(model_cols) = paste('model', 1:nrow(model_settings))
```

# Plots

```{r}
library(ggplot2)
library(fitdistrplus)
library(tidyr)
library(ggpubr)
library(rstan)
library(dplyr)
library(scales)

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

```{r}
formatter <- function(x){ 
  (x-1)*100 
}


model_settings$i <- 1:nrow(model_settings)
num <- as.numeric(str_extract(ff, "[0-9]+"))
```

```{r}
effect_ests <- list()

for(i in 1:length(num)){
  print(i)
  print(ff[i])
  load(ff[i])
  
  dat <- platcov_dat_analysis_list[1:2][model_settings$dataset[num[i]]][[1]]
  
  
  intervention = model_settings$intervention[num[i]] # prefix of analysis file
  ref_arm = "No study drug" # model_settings$ref_arm[i]
  trt_intervention = unique(dat$Trt)
  trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
  effect_ests[[num[i]]] = 
    as.data.frame(exp(summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%', '10%','50%','90%','97.5%'),drop=F]))
  
  effect_ests[[num[i]]]$mod <- model_settings$mod[num[i]]
  effect_ests[[num[i]]]$i <- model_settings$i[num[i]]
  effect_ests[[num[i]]]$trt <- trts
  effect_ests[[num[i]]]$Dmax <- Dmax[model_settings$dataset[num[i]]]
}

effect_ests
```

# Results: Follow-up duration of 5 days

```{r}
#main model 5 days with linear model # 1
load(ff[which(num == 1)])
effects <- (rstan::extract(out, par = 'trt_effect'))

writeLines(sprintf("Probability of treatment effect less than 1.2 is %s",
                   sum(exp(effects$trt_effect[,1]) < 1.2)/length(effects$trt_effect[,1])
))


eff_flx <- quantile(formatter(exp(effects$trt_effect[,1])), c(0.5, 0.025, 0.975))
#eff_nir <- quantile(formatter(exp(effects$trt_effect[,2])), c(0.5, 0.025, 0.975))

writeLines(sprintf("Effects of fluoxetine: %s [95CrI: %s - %s]", 
                  # \nEffects of nirmatrelvir: %s [95CrI: %s - %s]",
                   round(eff_flx[1], 2),
                   round(eff_flx[2], 2),
                   round(eff_flx[3], 2)#,
                  # round(eff_nir[1], 2),
                  # round(eff_nir[2], 2),
                  # round(eff_nir[3], 2)
))
```

```{r}
#main model 5 days with non-linear model # 2
load(ff[which(num == 2)])
effects <- (rstan::extract(out, par = 'trt_effect'))

writeLines(sprintf("Probability of treatment effect less than 1.2 is %s",
                   sum(exp(effects$trt_effect[,1]) < 1.2)/length(effects$trt_effect[,1])
))


eff_flx <- quantile(formatter(exp(effects$trt_effect[,1])), c(0.5, 0.025, 0.975))
#eff_nir <- quantile(formatter(exp(effects$trt_effect[,2])), c(0.5, 0.025, 0.975))

writeLines(sprintf("Effects of fluoxetine: %s [95CrI: %s - %s]", 
                  # \nEffects of nirmatrelvir: %s [95CrI: %s - %s]",
                   round(eff_flx[1], 2),
                   round(eff_flx[2], 2),
                   round(eff_flx[3], 2)#,
                  # round(eff_nir[1], 2),
                  # round(eff_nir[2], 2),
                  # round(eff_nir[3], 2)
))
```

# Results: Follow-up duration of 7 days

```{r}
#main model 7 days with linear model # 9
load(ff[which(num == 9)])
effects <- (rstan::extract(out, par = 'trt_effect'))

writeLines(sprintf("Probability of treatment effect less than 1.2 is %s",
                   sum(exp(effects$trt_effect[,1]) < 1.2)/length(effects$trt_effect[,1])
))


eff_flx <- quantile(formatter(exp(effects$trt_effect[,1])), c(0.5, 0.025, 0.975))
#eff_nir <- quantile(formatter(exp(effects$trt_effect[,2])), c(0.5, 0.025, 0.975))

writeLines(sprintf("Effects of fluoxetine: %s [95CrI: %s - %s]", 
                  # \nEffects of nirmatrelvir: %s [95CrI: %s - %s]",
                   round(eff_flx[1], 2),
                   round(eff_flx[2], 2),
                   round(eff_flx[3], 2)#,
                  # round(eff_nir[1], 2),
                  # round(eff_nir[2], 2),
                  # round(eff_nir[3], 2)
))
```

```{r}
#main model 7 days with non-linear model # 10
load(ff[which(num == 10)])
effects <- (rstan::extract(out, par = 'trt_effect'))

writeLines(sprintf("Probability of treatment effect less than 1.2 is %s",
                   sum(exp(effects$trt_effect[,1]) < 1.2)/length(effects$trt_effect[,1])
))


eff_flx <- quantile(formatter(exp(effects$trt_effect[,1])), c(0.5, 0.025, 0.975))
#eff_nir <- quantile(formatter(exp(effects$trt_effect[,2])), c(0.5, 0.025, 0.975))

writeLines(sprintf("Effects of fluoxetine: %s [95CrI: %s - %s]", 
                  # \nEffects of nirmatrelvir: %s [95CrI: %s - %s]",
                   round(eff_flx[1], 2),
                   round(eff_flx[2], 2),
                   round(eff_flx[3], 2)#,
                  # round(eff_nir[1], 2),
                  # round(eff_nir[2], 2),
                  # round(eff_nir[3], 2)
))
```

# Plot treatment effect

```{r}

flag_fluoxetine <- c(1,2,9,10)
effect_fluoxetine <- effect_ests[flag_fluoxetine]
effect_fluoxetine <- as.data.frame(do.call("rbind", effect_fluoxetine))

effect_fluoxetine$model <- as.factor(effect_fluoxetine$mod)
levels(effect_fluoxetine$model) <- c("Linear", "Non-linear")
effect_fluoxetine$model <- factor(effect_fluoxetine$model, levels = (c("Linear", "Non-linear")))

effect_fluoxetine$Dmax <- as.factor(effect_fluoxetine$Dmax)
levels(effect_fluoxetine$Dmax) <- c("5 days", "7 days")

colnames(effect_fluoxetine)[1:5] <- c("L95", "L80", "med", "U80", "U95")

effect_fluoxetine$trt <- as.character(effect_fluoxetine$trt)
# effect_fluoxetine$trt[effect_fluoxetine$trt == "Nirmatrelvir + Ritonavir"] <- "Nirmatrelvir"
effect_fluoxetine$trt <- as.factor(effect_fluoxetine$trt)

G1 <- ggplot(effect_fluoxetine, 
       aes(x = trt, y = med, col = Dmax, shape = model)) +
  geom_point(position = position_dodge(width = 0.75), size = 4) +
  geom_errorbar(aes(x = trt, ymin = L95, ymax = U95),position = position_dodge(width = 0.75), width = 0, linewidth = 0.65) +
  geom_errorbar(aes(x = trt, ymin = L80, ymax = U80),position = position_dodge(width = 0.75), width = 0, linewidth = 1.5) +
  geom_rect(aes(ymin = 0.9, ymax = 1.2, xmin = 0, xmax = 2), fill = "#7D7C7C", alpha = 0.05, col = NA) +
  facet_grid(model~., scales = "free") +
  coord_flip() +
  theme_bw() +
  geom_hline(yintercept = 1, col = "red", linetype = "dashed") +
  scale_color_manual(values = c("#004225", "#F99417"), name = "Post-treatment assessment duration") +
  scale_shape_manual(values = c(16,17), name = "Model", guide = "none") +
  scale_y_continuous(labels = formatter, limits = c(0.9, 1.6), expand = c(0,0)) +
  ylab("Change in viral clearance rate (%)") +
  xlab("") +
  ggtitle("B) Estimated treatment effects")  + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10))
G1


```

# Plot viral load dynamics

```{r}
dataplot <- platcov_dat
dataplot$Time

dataplot$Trt <- as.character(dataplot$Trt)
#dataplot$Trt[dataplot$Trt == "Nirmatrelvir + Ritonavir"] <- "Nirmatrelvir"
dataplot$Trt <- as.factor(dataplot$Trt)



dataplot = 
  dataplot %>% ungroup() %>%
  filter(Timepoint_ID %in% c(0:7, 10, 14), mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 

dataplot$Timepoint_ID_num <- dataplot$Timepoint_ID

dataplot2 <- aggregate(log10_viral_load~ID+Timepoint_ID+Timepoint_ID_num+Trt+Site+BMI+Plate+Age+Sex+Symptom_onset, 
                       data = dataplot, FUN = median)

dataplot3<- aggregate(log10_viral_load~Timepoint_ID+Timepoint_ID_num+Trt, data = dataplot, FUN = quantile, c(0.25, 0.5, 0.75))
dataplot3[,4:6] <- as.data.frame(as.matrix(dataplot3[,4]))
colnames(dataplot3)[4:6] <- c("Q1", "Q2", "Q3")

cols <- unique(dataplot$trt_color)
cols <- cols[c(2,1)]

G2 <- ggplot() +
  geom_jitter(data = dataplot, aes(x = Timepoint_ID_num, y = log10_viral_load, col = Trt), 
              alpha = 0.2, size = 1.5, shape = 21,
              width = 0.15) +
  scale_fill_manual(values = cols, name = "") +
  geom_line(data = subset(dataplot3, Timepoint_ID_num <= 7), aes(x =  Timepoint_ID_num, y = Q2, group = Trt, col = Trt), linewidth = 1, linetype = 1) +
  geom_line(data = subset(dataplot3,  Timepoint_ID_num >= 7), aes(x =  Timepoint_ID_num, y = Q2, group = Trt, col = Trt), linewidth = 0.75, linetype = "dashed") +
  geom_point(data = dataplot3, aes(x = Timepoint_ID_num, y = Q2, fill = Trt), size = 3.5, shape = 24) +
  scale_color_manual(values = cols, name = "") +
  theme_bw() +
  scale_x_continuous(breaks = 0:14) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,8,2)) +
  xlab("Time since randomisation (days)") +
  ylab("SARS-CoV-2 genomes/mL") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10)) +
  ggtitle("A) Viral load dynamics")

G2   

```

```{r}
Fig2 <- ggarrange(G2, G1)
png("Plots/Fig2_Fluoxetine_analysis.png", width = 10, height = 5, units = "in", res = 350)
Fig2
dev.off()

```

# Plot half-life

```{r}
# 3. Individual half-life
print(model_settings)
load(ff[which(num == 9)])

slopes <- as.data.frame(-1*(summary(out, pars='slope',use_cache=F,probs=my_probs)$summary[,c('2.5%','10%','50%','90%','97.5%'),drop=F]))
colnames(slopes) <- c("L95", "L80", "med", "U80", "U95")
t_half <- (log10(2)/(slopes)*24)

platcov_dat_analysis <- platcov_dat_analysis_list[[1]]

t_half <- cbind(t_half, unique(platcov_dat_analysis[,c("ID", "Trt")]))
t_half <- as.data.frame(t_half)
t_half <- t_half[order(t_half$Trt, t_half$med),]
t_half$i <- 1:nrow(t_half)

t_half$Trt <- as.character(t_half$Trt)
#t_half$Trt[t_half$Trt == "Nirmatrelvir + Ritonavir"] <- "Nirmatrelvir"
t_half$Trt <- as.factor(t_half$Trt)
t_half$Trt <- factor(t_half$Trt, levels = c("Fluoxetine", 
                                            #"Nirmatrelvir", 
                                            "No study drug"))

med_t_half <- t_half %>%
  group_by(Trt) %>%
  summarise("Q2" = median(med),
            "Q1" = quantile(med, 0.25),
            "Q3" = quantile(med, 0.75)) %>%
  as.data.frame()
 

G3 <- ggplot(t_half, aes(x = i, y = med, col = Trt)) + geom_point() +
  theme_bw() +
  coord_flip(ylim=c(0, 50)) +
  scale_y_continuous(expand = c(0,0)) +
  geom_errorbar(aes(ymin = L80, ymax = U80), width = 0, alpha = 0.4) +
  geom_hline(data = med_t_half, aes(yintercept = Q2, col = Trt, linetype = Trt), linewidth = 0.75) +
  scale_color_manual(values = cols, name = "") +
  scale_linetype_manual(values = c("dashed","dashed", "dashed"), guide = "none") +
  ylab("Viral clearance half-life (hours)") +
  xlab("") +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    axis.title  = element_text(face = "bold"),
    plot.title = element_text(face = "bold"),
    legend.position = "bottom") +
  ggtitle(paste0("Viral clearance half-life"))
G3
```

```{r}
png("Plots/Fig3_Fluoxetine_analysis_half_life_7d.png", width = 5, height = 5, units = "in", res = 350)
G3
dev.off()
```

```{r}
data.frame("Trt" = med_t_half$Trt, round(med_t_half[,-1],1))
```

# Traceplot

```{r}
#main model 7 days with linear model # 9
load(ff[which(num == 9)])

trace <- traceplot(out, pars = c("alpha_0", "beta_0", "trt_effect", "gamma_rnasep", "t_dof"),
          ncol = 2, nrow = 3)

png("Plots/FigSx_traceplot_main_analysis_7d.png", width = 8, height = 5, units = "in", res = 350)
annotate_figure(trace,
                top = textGrob("Traceplot for Fluoxetine analysis: Linear model with 7 days follow-up", gp = gpar(cex = 1.2, fontface="bold")))
dev.off()
```

# Individual plots

```{r}
# 9 = linear model; 10 = non-linear model
# 7-day follow-up
model_list = list()
mod_select <- c(9,10)

stan_inputs_i <- stan_inputs[[model_settings$dataset[num == 9]]]
platcov_dat_analysis <- data.frame("ID" = stan_inputs_i$analysis_data_stan$id,
            "log10_viral_load" = stan_inputs_i$analysis_data_stan$log_10_vl,
            "Time" = stan_inputs_i$analysis_data_stan$obs_day)

ID_map <- stan_inputs_i$ID_map

for(i in 1:length(mod_select)){
  load(ff[which(num == mod_select[i])])
  model_list[[i]] = out
}


preds <- lapply(model_list, rstan::extract, "preds")
preds <- lapply(preds, `[[`, 1)
preds_list <- lapply(preds, function(x) as.data.frame(t(apply(x, 2, quantile, c(0.025, 0.5, 0.975)))))
preds_list <- lapply(preds_list, function(x) cbind(platcov_dat_analysis, x))
models <- c("Linear", "Non-linear")
preds_list <- Map(cbind, preds_list, models)
col_names <- c(colnames(platcov_dat_analysis), c("low", "med", "up", "model"))
preds_list <- lapply(preds_list, setNames, col_names)
preds_list <- lapply(preds_list, function(x) data.frame(x, "censor" = c(rep("none", stan_inputs_i$analysis_data_stan$N_obs), 
                                                                        rep("left", (stan_inputs_i$analysis_data_stan$Ntot - stan_inputs_i$analysis_data_stan$N_obs)))))
preds_list <- lapply(preds_list, function(x) merge(x, ID_map, by.x = "ID", by.y = "ID_stan"))
preds_list <- lapply(preds_list, function(x) merge(x, as.data.frame(Baseline_data[,c("ID", "Trt")]), by.x = "ID_key", by.y = "ID"))


preds_dat <- do.call("rbind", preds_list)

preds_dat$Trt <- as.character(preds_dat$Trt)
preds_dat$Trt[preds_dat$Trt == "Nirmatrelvir + Ritonavir"] <- "Nirmatrelvir"
preds_dat$Trt <- as.factor(preds_dat$Trt)

preds_dat$model <- as.factor(preds_dat$model)
preds_dat$censor <- as.factor(preds_dat$censor)


ID_map = merge(stan_inputs_i$ID_map, Baseline_data, by.x = 'ID_key',by.y = 'ID')
ID_map <- ID_map[order(ID_map$Trt, ID_map$ID_key),]
```

```{r}
ind_plot_list <- list()
resid_dat <- NULL
for(i in 1:nrow(ID_map)){
  
  plot_data <- preds_dat %>% filter(ID_key == ID_map$ID_key[i])
  plot_data$resid <- plot_data$log10_viral_load - plot_data$med
  plot_data$Timepoint_ID <- round(plot_data$Time)
  resid_dat <- rbind(resid_dat, plot_data)
  
  lab <- paste0(plot_data$ID_key[1], "\n", plot_data$Trt[1])
  
  ind_plot_list[[i]] <- ggplot() +
    geom_point(data = plot_data[plot_data$model == "Linear",], aes(x = Time, y = log10_viral_load, shape = censor),
               size = 2.5, alpha = 0.7) +
    geom_ribbon(data = plot_data, aes(x = Time, ymin = low, ymax = up, fill = model), alpha = 0.2) +
    geom_line(data = plot_data, aes(x = Time, y = med, col = model), linewidth = 1) +
    theme_bw() +
    scale_y_continuous(labels=label_math(), breaks = seq(0,10,2)) +
    coord_cartesian(ylim = c(0,9), xlim = c(0,7))+
    scale_x_continuous(breaks = 0:14) +
    ylab("") +
    xlab("") +
    theme(
      axis.title  = element_text(face = "bold"),
      plot.title = element_text(face = "bold", hjust = 0.5, size = 8),
      legend.position = "right",
      plot.margin = unit(c(0.1,0.1,0.1,0.1), 'lines')) +
    scale_color_manual(values = c("#1640D6", "#BE3144"), name = "Model") +
    scale_fill_manual(values = c("#1640D6", "#BE3144"), name = "Model") +
    scale_shape_manual(values = c(17, 16), guide = "none", drop=FALSE) +
    ggtitle(lab)
  
}
```

```{r}
ind_plot_all <- ggarrange(plotlist =  ind_plot_list, nrow = 4, ncol = 4, common.legend = T, legend = "right")
```

```{r}
for(i in 1:length(ind_plot_all)){

png(paste0("Plots/Individual_plots/Ind_plot_", i, ".png"), width = 12, height = 8, units = "in", res = 350)

print(annotate_figure( ind_plot_all[[i]], bottom = textGrob("Time since randomisation (days)", vjust = 0.5, gp = gpar(cex = 1.2, fontface="bold")),
                left = textGrob("SARS-CoV-2 genomes/mL", rot = 90, gp = gpar(cex = 1.2, fontface="bold"))))
dev.off()
  
  
}
```

## Residuals analysis

```{r}
resid_plot <- ggplot(resid_dat[resid_dat$Timepoint_ID <= 7,], aes(x = as.factor(Timepoint_ID), y = resid)) +
  geom_jitter(width = 0.2, alpha = 0.15, size = 2, aes(shape = censor, color = censor)) +
  geom_boxplot(outlier.shape = NA, fill = "white", alpha = 0.85) +
  theme_bw() +
  facet_grid(model~ Trt) +
  geom_hline(yintercept = 0, col = "red", linetype = "dashed") +
  xlab("Time since randomisation (days)") +
  ylab("Residuals") +
  theme(
    axis.title  = element_text(face = "bold", size = 12),
    strip.text = element_text(face = "bold", size = 10),
    legend.position = "bottom"
) +
  scale_shape_manual(values = c(17, 16), name = "Censor") +
  scale_color_manual(values = rev(c("#38419D", "#BF3131")), name = "Censor")
resid_plot 
```

```{r}
png("Plots/residual_plot.png" , width = 8, height = 6, units = "in", res = 350)
resid_plot
dev.off()
```

```{r}
med_data <- resid_dat %>% 
  group_by(model, Timepoint_ID, Trt) %>%
  summarise(Observed = median(log10_viral_load),
            Predicted = median(med))

med_data <- gather(med_data, key = "Type", value = "Value", Observed:Predicted, factor_key = T)

med_data <- med_data[!(med_data$model == "Non-linear" & med_data$Type == "Observed"), ]

med_data$Type2 <- paste0(med_data$model, med_data$Type)
med_data$Type2 <- as.factor(med_data$Type2)
levels(med_data$Type2) <- c("Observed", "Linear model", "Non-linear model")
```

```{r}
med_pred_plot <- ggplot(med_data[med_data$Timepoint_ID <= 7,], aes(x = Timepoint_ID, y = Value, 
                                                  col = Type2, shape = Type2,
                                                  fill = Type2)) +
  facet_grid(.~ Trt) +
  geom_line(linewidth = 0.75, alpha = 0.75) +
  geom_point(size = 3, alpha = 0.75, col = "black") +
  theme_bw() +
  xlab("Time since randomisation (days)") +
  ylab("SARS-CoV-2 genomes/mL") + 
  theme(
    axis.title  = element_text(face = "bold", size = 12),
    strip.text = element_text(face = "bold", size = 10),
    legend.position = "bottom"
) +
  scale_x_continuous(breaks = 0:7) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,8,2), limits = c(-1,8)) +
  scale_color_manual(values = c("#212A3E", "#004225", "#F99417"), name = NULL) +
  scale_fill_manual(values = c("#212A3E", "#004225", "#F99417"), name = NULL) +
  scale_shape_manual(values = c(21, 24, 24), name = NULL) +  
  geom_hline(yintercept = 0, col = "red", linetype = "dashed")

med_pred_plot
```

```{r}
png("Plots/median_pred_obs_plot.png" , width = 8, height = 4, units = "in", res = 350)
med_pred_plot
dev.off()
```

# Leave-one-out analysis

```{r}
# 9 = linear model; 10 = non-linear model
# 7-day follow-up
model_settings$i <- 1:nrow(model_settings)
num <- as.numeric(str_extract(ff, "[0-9]+"))

model_list = list()
mod_select <- c(9,10)

for(i in 1:length(mod_select)){
  load(ff[which(num == mod_select[i])])
  model_list[[i]] = out
}
```

```{r}
#linear
log_lik_1 <- extract_log_lik(model_list[[1]], merge_chains = FALSE)
r_eff <- relative_eff(exp(log_lik_1), cores = 2) 
loo_1 <- loo(log_lik_1, r_eff = r_eff, cores = 2)
print(loo_1)
```

```{r}
#non-linear
log_lik_2 <- extract_log_lik(model_list[[2]], merge_chains = FALSE)
r_eff_2 <- relative_eff(exp(log_lik_2), cores = 2) 
loo_2 <- loo(log_lik_2, r_eff = r_eff_2, cores = 2)
print(loo_2)
```

```{r}
comp <- loo_compare(loo_1, loo_2)
print(comp)
```

## Empirical cumulative distribution function

```{r}
library(NADA2)
dataplot_test <- dataplot
dataplot_test$Timepoint_ID <- as.factor(dataplot_test$Timepoint_ID)
levels(dataplot_test$Timepoint_ID) <- paste0("Day ", levels(dataplot_test$Timepoint_ID))
dataplot_test$Timepoint_ID <- factor(dataplot_test$Timepoint_ID, levels = c("Day 0", "Day 1", "Day 2", "Day 3",
                                                                            "Day 4", "Day 5", "Day 6", "Day 7",
                                                                            "Day 10", "Day 14"))

dataplot_test %>% group_by(Timepoint_ID, Trt) %>%
  summarise(mean_vl = mean(log10_viral_load))

dataplot_test <- dataplot_test[!is.na(dataplot_test$Timepoint_ID),]

Summary <- NULL
for(i in 1:length(levels(dataplot_test$Timepoint_ID))){
  dataplot_test2 <- dataplot_test %>% filter(Timepoint_ID == levels(dataplot_test$Timepoint_ID)[i])
  dataplot_test2 <- dataplot_test2 %>% group_by(ID, Trt) %>% summarise(log10_viral_load = mean(log10_viral_load))
  res <- dataplot_test2 %>% group_by(Trt) %>% summarise(med = median(log10_viral_load),
                                                 low = quantile(log10_viral_load, 0.25),
                                                 high = quantile(log10_viral_load, 0.75))
  out <- wilcox.test(dataplot_test2$log10_viral_load~dataplot_test2$Trt, exact = F)
  
  
  summary_res <- data.frame("Timepoint_ID" = levels(dataplot_test$Timepoint_ID)[i],
                      med_FLX = res$med[res$Trt == "Fluoxetine"],
                      low_FLX = res$low[res$Trt == "Fluoxetine"],
                      high_FLX = res$high[res$Trt == "Fluoxetine"],
                      med_NSD = res$med[res$Trt == "No study drug"],
                      low_NSD = res$low[res$Trt == "No study drug"],
                      high_NSD = res$high[res$Trt == "No study drug"],
                      "p_val" = out$p.value)
  summary_res$lab_FLX <- paste0("Fluoxetine: ",  format(round(summary_res$med_FLX,1), nsmall = 1), " [", 
                                format(round(summary_res$low_FLX,1), nsmall = 1),  "; ",
                                format(round(summary_res$high_FLX,1), nsmall = 1), "]"
                                )
  summary_res$lab_NSD <- paste0("No study drug: ",  format(round(summary_res$med_NSD,1), nsmall = 1), " [", 
                                format(round(summary_res$low_NSD,1), nsmall = 1),  "; ",
                                format(round(summary_res$high_NSD,1), nsmall = 1), "]")
  summary_res$lab_p_val <- paste0("p-value = ", format(round(summary_res$p_val,4), nsmall = 4))
  
  Summary<- rbind(Summary, summary_res)
}

Summary$Timepoint_ID
Summary$Timepoint_ID <- factor(Summary$Timepoint_ID, levels = c("Day 0", "Day 1", "Day 2", "Day 3",
                                                                "Day 4", "Day 5", "Day 6", "Day 7",
                                                                "Day 10", "Day 14"))

plot_ecdf <- ggplot() +
  stat_ecdf(geom = "step",data = dataplot_test, mapping = aes(x = log10_viral_load, col = Trt), linewidth = 1.2, alpha = 0.75) +
  facet_wrap(.~Timepoint_ID, ncol = 3) +
  theme_bw(base_size = 12) +
  scale_color_manual(values = rev(c("#6DCD59FF", "#26828EFF")), name = "") +
  scale_x_continuous(breaks = seq(0,12,2), limits = c(0,12)) +
  xlab("SARS-CoV-2 densities (log10 genomes/mL)") +
  ylab("Empirical cumulative distribution function") +
  geom_vline(xintercept = 1.04, col = "red") +
  theme(axis.title = element_text(face = "bold")) +
  geom_vline(data = Summary, aes(xintercept = med_FLX), col = "#26828EFF", linetype = "dashed") +
  geom_vline(data = Summary, aes(xintercept = med_NSD), col = "#6DCD59FF", linetype = "dashed") +
  geom_text(data = Summary, mapping = aes(label = lab_p_val), x = 5, y = 0, hjust = 0, vjust = 0, size = 2.5) +
  geom_text(data = Summary, mapping = aes(label = lab_FLX), x = 5, y = 0.1, hjust = 0, vjust = 0, size = 2.5) +
  geom_text(data = Summary, mapping = aes(label = lab_NSD), x = 5, y = 0.2, hjust = 0, vjust = 0, size = 2.5) 

plot_ecdf
```

```{r}
png("Plots/ecdf.png", width = 10, height = 8, res = 300, units = "in")
plot_ecdf
dev.off()
```
