---
title: "Fluoxetine meta-analysis PLATCOV"
author: "James Watson and Phrutsamon Wongnak"
format: pdf
editor: visual
---

```{r}
knitr::opts_chunk$set(cache = T, cache.comments = FALSE,
                      echo = F, include = TRUE, 
                      fig.width = 8, fig.height = 8,
                      fig.pos = 'H',dev = 'png', dpi = 300)

```

```{r}
library(rstan)
library(tidyverse)
library(kableExtra)
library(finalfit)
library(RColorBrewer)

## information on software/hardware used
version
sessionInfo()

rstan_options(auto_write = TRUE)
## parameters for the analysis
Dmax = c(5.5, 8)
study_threshold = 1.2
RUN_MODELS = F

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

## Load data

Set up analysis

```{r}
intervention = 'Fluoxetine_meta' # prefix of analysis file
ref_arm = 'No study drug'
```

```{r load_data}
#| echo: false
# set as file with relevant dataset

f_name = paste0(intervention,'_analysis.csv')
platcov_dat = read.csv(f_name)
platcov_dat$Trt[platcov_dat$Trt=='Nirmatrelvir + Ritonavir']="Nirmatrelvir"
platcov_dat$Rand_date = as.POSIXct(platcov_dat$Rand_date)
trt_intervention = unique(platcov_dat$Trt)
trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
```

## Make modified intention to treat population

```{r make_analysis_data}
#| echo: false
platcov_dat = platcov_dat %>% group_by(ID) %>%
  mutate(
    mITT = any(Per_protocol_sample==1 & Timepoint_ID>=3) &
      !all(CT_NS==40))

pop_table = platcov_dat %>% distinct(ID, .keep_all = T)
table(Intervention=pop_table$Trt, `mITT population` = pop_table$mITT)
```

```{r}
platcov_dat$VariantClass_new <- as.character(platcov_dat$Variant)
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BA.5.2", "BA.5.5", "BQ.1")] <- "BA.5"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("BN.1.2", "BN.1.3", "CH.1.1")] <- "BA.2.75"
platcov_dat$VariantClass_new[platcov_dat$VariantClass_new %in% c("XBB1.5-like with F456L")] <- "XBB.1.5-like"
platcov_dat$VariantClass_new <- as.factor(platcov_dat$VariantClass_new)
```

## Baseline characteristics

```{r}
#| echo: false
platcov_dat = platcov_dat %>% ungroup() %>%
  mutate(Study_time = as.numeric(difftime(Rand_date,min(Rand_date),units = 'weeks')),
         Study_time = scale(Study_time) ) %>%
  group_by(ID, Timepoint_ID) %>%
  mutate(daily_VL = mean(log10_viral_load),
         Sex = as.factor(ifelse(Sex==1,'Male','Female')),
         Site = as.factor(Site),
         Trt = factor(Trt, levels=c(ref_arm, trts)),
         Vaccinated = as.factor(ifelse(N_dose>0,'Yes','No')),
         Variant = as.factor(Variant)#normalise
         )  %>%
  ungroup() %>%
  mutate(trt_color = brewer.pal(name = 'Dark2',8)[c(1,7)][as.numeric(Trt)]) 

Baseline_data = platcov_dat %>% ungroup() %>% 
  distinct(ID, .keep_all = T) %>%
  filter(Timepoint_ID==0) %>% 
  mutate(Baseline.viral.load = daily_VL)


tab.ff <- Baseline_data %>% filter(mITT) %>%
  summary_factorlist(
    dependent = "Trt", # name of grouping / treatment variable
    explanatory = c("Site", "Age", 'Sex','BMI', "Weight", "Baseline.viral.load", 
                    "VariantClass_new",'Symptom_onset','Vaccinated','Fever_Baseline'),
    total_col = T, # add column with statistics for the whole sample
    add_row_total = F, # add column with number of valid cases
    include_row_missing_col = FALSE,
    add_dependent_label = T,
    na_include = TRUE # make variables' missing data explicit
  ) %>%
  kbl(
    caption = "Baseline characteristics in mITT population",
    booktabs = TRUE,
    align = "lrlrrr",
  ) %>%
  kable_classic(full_width = FALSE)
tab.ff
```

## Fit models

```{r}
#| echo: false
source('priors.R')

covs_base = c('Study_time','Site', 'VariantClass_new')
covs_full=c(covs_base, 'Age_scaled','Symptom_onset','N_dose')

# Analysis data
platcov_dat_analysis_list = list()
stan_inputs = list()

for(i in 1:length(Dmax)){
  platcov_dat_analysis_list[[i]] = 
  platcov_dat %>% ungroup() %>%
  filter(Time <= Dmax[i], mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 
  
writeLines(sprintf('Analysis dataset for follow-up duration of %s days contains %s patients and %s datapoints (%s above LLOD, %s%%)',
                   max(floor(platcov_dat_analysis_list[[i]]$Time)),
                   length(unique(platcov_dat_analysis_list[[i]]$ID)),
                   nrow(platcov_dat_analysis_list[[i]]),
                   sum(platcov_dat_analysis_list[[i]]$CT_NS<40),
                   round(100*mean(platcov_dat_analysis_list[[i]]$CT_NS<40))))

stan_inputs[[i]] = 
  make_stan_inputs(input_data_fit = platcov_dat_analysis_list[[i]],
                   int_covs_base = covs_base,
                   int_covs_full = covs_full,
                   slope_covs_base = covs_base,
                   slope_covs_full = covs_full,
                   trt_frmla = formula('~ Trt'),
                   Dmax = Dmax[i])
  
}
```

```{r setup_models}
all_mods = list.files('Stan_models',full.names = TRUE,pattern = '*stan')

model_settings = expand.grid(mod = all_mods,
                             prior = 1:2,
                             cov_matrices = 1:2, 
                             dataset = 1:2)

model_settings$Niter = 4000
model_settings$Nwarmup = 2000
model_settings$Nthin = 4
model_settings$Nchain = 4

model_settings$intervention <- intervention

writeLines(sprintf('We are running all models with %s chains and %s samples for each chain, discarding %s for burn-in and thining every %s, thus giving a total of %s posterior samples per model.',
                   unique(model_settings$Nchain),
                   unique(model_settings$Niter),
                   unique(model_settings$Nwarmup),
                   unique(model_settings$Nthin), 
                   unique(model_settings$Nchain*(model_settings$Niter-model_settings$Nwarmup)/model_settings$Nthin)))

model_setup_f_name = paste0('Rout/model_run_setup_',intervention,'.RData')
save(model_settings, 
     platcov_dat_analysis_list,
     stan_inputs, 
     all_priors,
     file = model_setup_f_name)
```

```{r}
if(RUN_MODELS){
  system(paste('Rscript --vanilla run_models_local.R',intervention))
}
```

```{r}
ff = list.files('Rout/', pattern = paste0(intervention, ".RData"))
ff = ff[grep(pattern = 'model_fits_',x = ff)]
if(!length(ff)==nrow(model_settings)) stop('not all outputs are ready for all model settings')
ff = paste0('Rout/',ff)
```

main model selection

```{r}
main_mod = which(model_settings$prior==1&
                   model_settings$cov_matrices==1&
                   model_settings$mod==all_mods[1])
main_mod
# model_cols = brewer.pal(n = nrow(model_settings), name = 'Set1')
# names(model_cols) = paste('model', 1:nrow(model_settings))
```

# Plots

```{r}
library(ggplot2)
library(fitdistrplus)
library(tidyr)
library(ggpubr)
library(rstan)
library(dplyr)
library(scales)

my_probs = c(0.025, 0.1, .5, .9, .975)
source('functions.R')
```

```{r}
formatter <- function(x){ 
  (x-1)*100 
}

model_settings$i <- 1:nrow(model_settings)
num <- as.numeric(str_extract(ff, "[0-9]+")) - 16 # subtract 16 to adjust the indice, because the results were run on the same batch with the main analysis
```

```{r}
effect_ests <- list()


for(i in 1:length(num)){
  print(i)
  print(ff[i])
  load(ff[i])
  
  dat <- platcov_dat_analysis_list[1:2][model_settings$dataset[num[i]]][[1]]
  
  
  intervention = model_settings$intervention[num[i]] # prefix of analysis file
  ref_arm = "No study drug" # model_settings$ref_arm[i]
  trt_intervention = unique(dat$Trt)
  trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
  effect_ests[[num[i]]] = 
    as.data.frame(exp(summary(out, pars='trt_effect',use_cache=F,probs=my_probs)$summary[,c('2.5%', '10%','50%','90%','97.5%'),drop=F]))
  
  effect_ests[[num[i]]]$mod <- model_settings$mod[num[i]]
  effect_ests[[num[i]]]$i <- model_settings$i[num[i]]
  effect_ests[[num[i]]]$trt <- trts
  effect_ests[[num[i]]]$Dmax <- Dmax[model_settings$dataset[num[i]]]
}

effect_ests
```

```{r}

flag_fluoxetine_meta <- c(1,2,9,10)
effect_fluoxetine_meta <- (do.call("rbind", effect_ests[flag_fluoxetine_meta]))

#Trt_meta <- row.names(effect_fluoxetine_meta)
#effect_fluoxetine_meta <- data.frame(effect_fluoxetine_meta, Trt_meta)

#effect_fluoxetine_meta$model <- rep(model_settings$mod[flag_fluoxetine_meta], each = length(unique(Trt_meta)))
effect_fluoxetine_meta$model <- as.factor(effect_fluoxetine_meta$mod)
levels(effect_fluoxetine_meta$model) <- c("Linear", "Non-linear")
effect_fluoxetine_meta$model <- factor(effect_fluoxetine_meta$model, levels = (c("Linear", "Non-linear")))


#effect_fluoxetine_meta$Dmax <- rep(model_settings$Dmax[flag_fluoxetine_meta], each = length(unique(Trt_meta)))
effect_fluoxetine_meta$Dmax <- as.factor(effect_fluoxetine_meta$Dmax)
levels(effect_fluoxetine_meta$Dmax) <- c("5 days", "7 days")

colnames(effect_fluoxetine_meta)[1:5] <- c("L95", "L80", "med", "U80", "U95")
row.names(effect_fluoxetine_meta) <- NULL

 effect_fluoxetine_meta$trt <- factor(effect_fluoxetine_meta$trt, levels = c("Ivermectin", "Favipiravir", "Fluoxetine", "Regeneron",  "Remdesivir","Molnupiravir",  "Nirmatrelvir"))
 levels(effect_fluoxetine_meta$trt)[4] <- "Casirivimab/imdevimab"
 levels(effect_fluoxetine_meta$trt)[7] <- "Ritonavir-boosted nirmatrelvir"

G1 <- ggplot(effect_fluoxetine_meta[effect_fluoxetine_meta$model == "Linear",], aes(x = trt, y = med, col = Dmax)) +
  geom_point(position = position_dodge(width = 0.5), size = 3) +
  geom_rect(aes(ymin = 0.6, ymax = 1.2, xmin = 0, xmax = 8), fill = "gray", alpha = 0.05, col = NA) +
  theme_bw() +
  coord_flip() +
  geom_errorbar(aes(ymin = L95, ymax = U95), width = 0, position = position_dodge(width = 0.5)) +
  geom_errorbar(aes(x = trt, ymin = L80, ymax = U80),position = position_dodge(width = 0.5), width = 0, linewidth = 1) +
  geom_point(position = position_dodge(width = 0.5), size = 3) +
  geom_hline(yintercept = 1, col = "red", linetype = "dashed") +
  scale_color_manual(values =  c("#004225", "#F99417"), name = "Post-treatment assessment duration") +
  scale_shape_manual(values = c(16,17), name = "Model", guide = "none") +
  scale_y_continuous(labels = formatter, limits = c(0.6, 2.8), expand = c(0,0),
                     breaks = seq(0.8,2.8,0.2)) +
  ylab("Change in rate of viral clearance (%)") +
  xlab("") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        plot.margin = unit(c(0.2, 0.2, 0.2, 0.2), 
                           "inches")) +
  ggtitle("B) Estimated treatment effects")

G1
 # facet_wrap(.~model)
```

```{r}
#main model 7 days with linear model # 9
load(ff[which(num == 9)])
effects <- (rstan::extract(out, par = 'trt_effect'))[[1]] %>% as.data.frame()

  dat <- platcov_dat_analysis_list[1:2][model_settings$dataset[9]][[1]]
  
  intervention = model_settings$intervention[9] # prefix of analysis file
  ref_arm = "No study drug" # model_settings$ref_arm[i]
  trt_intervention = unique(dat$Trt)
  trts = trt_intervention[trt_intervention!=ref_arm] # get interventions
  colnames(effects) <- trts
  
for(i in 1:length(trts)){
 writeLines(sprintf("Probability of treatment effect of fluoxetine less treatment effect of %s is %s",
    trts[i],
    mean(effects$Fluoxetine < effects[,i])
))
}
  
```

```{r}
trt_colors = get_trt_colors()
```

```{r}
dataplot <- platcov_dat
#dataplot$Time

dataplot$Trt <- as.character(dataplot$Trt)
#dataplot$Trt[dataplot$Trt == "Nirmatrelvir + Ritonavir"] <- "Nirmatrelvir"
dataplot$Trt <- as.factor(dataplot$Trt)

dataplot = 
  dataplot %>% ungroup() %>%
  filter(Timepoint_ID %in% c(0:7, 10, 14), mITT) %>%
  arrange(log10_viral_load==log10_cens_vl) %>%
  mutate(Variant = as.factor(Variant),
         Site = as.factor(Site),
         RnaseP_scaled = scale(40 - CT_RNaseP,scale = F),
         Mean_age = mean(Age[!duplicated(ID)]),
         SD_age = sd(Age[!duplicated(ID)]),
         Age_scaled = (Age-Mean_age)/SD_age,
         Symptom_onset = ifelse(is.na(Symptom_onset),2,Symptom_onset)) 

dataplot$Timepoint_ID_num <- dataplot$Timepoint_ID

cols <- trt_colors[levels(dataplot$Trt)]

dataplot$Trt <- factor(dataplot$Trt, levels = c("No study drug", "Ivermectin", "Favipiravir", "Fluoxetine", "Regeneron",  "Remdesivir","Molnupiravir",  "Nirmatrelvir"))
 levels(dataplot$Trt)[5] <- "Casirivimab/imdevimab"
 levels(dataplot$Trt)[8] <- "Ritonavir-boosted nirmatrelvir"

cols <- cols[c("No study drug", "Ivermectin", "Favipiravir", "Fluoxetine", "Regeneron",  "Remdesivir","Molnupiravir",  "Nirmatrelvir")]
names(cols)[5] <- "Casirivimab/imdevimab"
names(cols)[5] <- "Ritonavir-boosted nirmatrelvir"


dataplot2 <- aggregate(log10_viral_load~ID+Timepoint_ID+Timepoint_ID_num+Trt+Site+BMI+Plate+Age+Sex+Symptom_onset, 
                       data = dataplot, FUN = median)

dataplot3<- aggregate(log10_viral_load~Timepoint_ID+Timepoint_ID_num+Trt, data = dataplot, FUN = quantile, c(0.25, 0.5, 0.75))
dataplot3[,4:6] <- as.data.frame(as.matrix(dataplot3[,4]))
colnames(dataplot3)[4:6] <- c("Q1", "Q2", "Q3")



G2 <- ggplot() +
  geom_jitter(data = dataplot, aes(x = Timepoint_ID_num, y = log10_viral_load, col = Trt), 
              alpha = 0.15, size = 1, shape = 21,
              width = 0.175) +
  scale_fill_manual(values = cols, name = "") +
  geom_line(data = subset(dataplot3, Timepoint_ID_num <= 7), aes(x =  Timepoint_ID_num, y = Q2, group = Trt, col = Trt), linewidth = 1, linetype = 1) +
  geom_line(data = subset(dataplot3,  Timepoint_ID_num >= 7), aes(x =  Timepoint_ID_num, y = Q2, group = Trt, col = Trt), linewidth = 0.75, linetype = "dashed") +
  geom_point(data = dataplot3, aes(x = Timepoint_ID_num, y = Q2, fill = Trt), size = 3, shape = 24, alpha = 0.9) +
  scale_color_manual(values = cols, name = "") +
  theme_bw() +
  scale_x_continuous(breaks = 0:14, limits = c(0,14)) +
  scale_y_continuous(labels=label_math(), breaks = seq(0,8,2)) +
  xlab("Time since randomisation (days)") +
  ylab("SARS-CoV-2 genomes/mL") + 
  theme(axis.title  = element_text(face = "bold"),
        plot.title = element_text(face = "bold"),
        legend.position = "bottom",
        axis.text = element_text(size = 10)) +
  ggtitle("A) Viral load dynamics")

G2   
```

```{r}
# png("Plots/Fig4_Fluoxetine_meta_analysis.png", width = 6, height = 6, units = "in", res = 350)
# G1
# dev.off()
G_combined <- ggarrange(G2, G1, align = "h")
png("Plots/Figx_Fluoxetine_meta_analysis.png", width = 12, height = 6, units = "in", res = 350)
G_combined
dev.off()
```

```{r}

for(d in c("5 days", "7 days")){
print(d)
for(j in c("Ivermectin", "Favipiravir", "Fluoxetine", "Casirivimab/imdevimab",  "Remdesivir","Molnupiravir",  "Ritonavir-boosted nirmatrelvir")){

drug <- j

if(d == "5 days"){ii <- 1} else {ii <- 9}

writeLines(sprintf("Effects of %s: %s [95CrI: %s - %s]",
                   drug,
                   round(formatter(effect_fluoxetine_meta[effect_fluoxetine_meta$i == ii & effect_fluoxetine_meta$trt == drug,]$med),2),
                   round(formatter(effect_fluoxetine_meta[effect_fluoxetine_meta$i == ii & effect_fluoxetine_meta$trt == drug,]$L95),2),
                   round(formatter(effect_fluoxetine_meta[effect_fluoxetine_meta$i == ii & effect_fluoxetine_meta$trt == drug,]$U95),2)
))
}
}
```

timeline_dat\$Rand_date

```{r}
mITT_ID_fluoxetine <- read.csv("mITT_ID_fluoxetine.csv")

timeline_dat <- platcov_dat_analysis_list[[1]]
timeline_dat <- unique(timeline_dat[,c("ID", "Rand_date", "Trt")])
timeline_dat$mITT_fluoxetine <- as.factor(as.numeric(timeline_dat$ID %in% mITT_ID_fluoxetine$ID))

levels(timeline_dat$mITT_fluoxetine) <- c("No", "Yes")

timeline_dat$Trt <- factor(timeline_dat$Trt, levels = (c("Ivermectin", "Remdesivir", "Regeneron", "Favipiravir", "Molnupiravir", "Nirmatrelvir", "Fluoxetine", "No study drug")  ))
 levels(timeline_dat$Trt)[3] <- "Casirivimab/imdevimab"
 levels(timeline_dat$Trt)[6] <- "Ritonavir-boosted nirmatrelvir"

timeline_dat$Rand_date <- as.Date(timeline_dat$Rand_date)

start_year <- (min(timeline_dat$Rand_date))
end_year <- (max(timeline_dat$Rand_date))


G2 <- ggplot(data = timeline_dat, aes(x=Rand_date, y = Trt, col = mITT_fluoxetine)) +
    geom_point(size = 3.5, alpha = 0.5) +
    theme_bw() +
    xlab("") +
    ylab("") +
    geom_vline(xintercept = seq.Date(start_year, end_year, "12 months"),
               col = "red", linetype = "dashed") +
    scale_x_date(date_labels =  "%b %y", breaks = seq.Date(start_year, end_year, "4 months"),
                 limits = c(start_year, end_year))+
    theme(axis.title = element_text(size = 15, face = "bold"),
          strip.text = element_text(size = 15, face = "bold"),
          axis.text = ggtext::element_markdown(size = 12),
          axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
          legend.text=element_text(size=10),
          plot.title = element_text(size = 15, face = "bold"),
          legend.position='bottom') +
    scale_y_discrete(drop = F) +
    scale_color_manual(values = rev(c("#BE3144", "gray")), name = "mITT in the main analysis")

G2

```

```{r}
png("Plots/FigSx_timeline.png", width = 8, height = 5, units = "in", res = 350)
G2
dev.off()
```

# Traceplot

```{r}
#main model 7 days with linear model # 9
load(ff[which(num == 9)])

trace <- traceplot(out, pars = c("alpha_0", "beta_0", "trt_effect", "gamma_rnasep", "t_dof"))

png("Plots/FigSx_traceplot_meta_analysis_7d.png", width = 8, height = 5, units = "in", res = 350)
annotate_figure(trace,
                top = textGrob("Traceplot for meta-analysis: Linear model with 7 days follow-up", gp = gpar(cex = 1.2, fontface="bold")))
dev.off()
```

Empirical cumulative distribution function

```{r}
dataplot_test <- dataplot
dataplot_test <- dataplot_test %>% filter(! Timepoint_ID %in% c(10, 14, 8))
dataplot_test$Timepoint_ID <- as.factor(dataplot_test$Timepoint_ID)
levels(dataplot_test$Timepoint_ID) <- paste0("Day ", levels(dataplot_test$Timepoint_ID))
dataplot_test$Timepoint_ID <- factor(dataplot_test$Timepoint_ID, levels = c("Day 0", "Day 1", "Day 2", "Day 3",
                                                                            "Day 4", "Day 5", "Day 6", "Day 7"))

dataplot_test <- dataplot_test[!is.na(dataplot_test$Timepoint_ID),]

library(NADA2)

Summary <- NULL
for(i in 1:length(levels(dataplot_test$Timepoint_ID))){
  dataplot_test2 <- dataplot_test %>% filter(Timepoint_ID == levels(dataplot_test$Timepoint_ID)[i])
  out = capture.output(cenanova(dataplot_test2$log10_viral_load, dataplot_test2$censor2, dataplot_test2$Trt, LOG = F))
  res1 <- str_extract_all(out[10], "[0-9]+\\.[0-9]+") %>% unlist() %>% as.numeric()
  res2 <- str_extract_all(out[4], "([0-9]+\\.[0-9]+e-[0-9]+)|([0-9]+\\.[0-9]+)") %>% unlist() %>% as.numeric()
  
  summary_res <- data.frame("Timepoint_ID" = levels(dataplot_test$Timepoint_ID)[i],
                        "mean_NSD" = res1[1], "mean_IVM" = res1[2], "mean_RGN" = res1[3], "mean_RDS" = res1[4],    
                        "mean_FAV" = res1[5], "mean_FLX" = res1[6], "mean_MOL" = res1[7], "mean_NIR" = res1[8],
                        "p_val" = as.numeric(res2[2]))
  
  Summary <- rbind(Summary, summary_res)
}

Summary$Timepoint_ID
Summary$Timepoint_ID <- factor(Summary$Timepoint_ID, levels = c("Day 0", "Day 1", "Day 2", "Day 3",
                                                                "Day 4", "Day 5", "Day 6", "Day 7",
                                                                "Day 10", "Day 14"))
Summary$lab_flx <- paste0("Fluoxetine: ", format(round(Summary$mean_FLX,1), nsmall = 1))
Summary$lab_nsd <- paste0("No study drug: ", format(round(Summary$mean_NSD,1), nsmall = 1))
Summary$lab_rgn <- paste0("Casirivimab/imdevimab: ", format(round(Summary$mean_RGN,1), nsmall = 1))
Summary$lab_rds <- paste0("Remdesivir: ", format(round(Summary$mean_RDS,1), nsmall = 1))
Summary$lab_fav <- paste0("Favipiravir: ", format(round(Summary$mean_FAV,1), nsmall = 1))
Summary$lab_mol <- paste0("Molnupiravir: ", format(round(Summary$mean_MOL,1), nsmall = 1))
Summary$lab_nir <- paste0("Ritonavir-boosted nirmatrelvir: ", format(round(Summary$mean_NIR,1), nsmall = 1))
Summary$lab_ivm <- paste0("Ivermectin: ", format(round(Summary$mean_IVM,1), nsmall = 1))

Summary$lab_p_val <- paste0("p-value = ", format(Summary$p_val, nsmall = 4))
cols <- trt_colors[levels(dataplot$Trt)]

dataplot_test %>% 
  distinct(ID, .keep_all = T) %>%
  summarise(mean_cen = mean(log10_cens_vl))
  

plot_ecdf_meta <- ggplot() +
  stat_ecdf(geom = "step",data = dataplot_test, mapping = aes(x = log10_viral_load, col = Trt), linewidth = 0.75, alpha = 1) +
  facet_wrap(.~Timepoint_ID, ncol = 2) +
  theme_bw(base_size = 15) +
  scale_color_manual(values = cols, name = "") +
  scale_x_continuous(breaks = seq(0,10,2), limits = c(0,12)) +
  xlab("SARS-CoV-2 densities (log10 genomes/mL)") +
  ylab("Empirical cumulative distribution function") +
  geom_vline(xintercept = 1.05, col = "red") +
  theme(axis.title = element_text(face = "bold")) +
  geom_vline(data = Summary, aes(xintercept = mean_FLX), col = cols["Fluoxetine"], linetype = "dashed") +
  geom_vline(data = Summary, aes(xintercept = mean_NSD), col = cols["No study drug"], linetype = "dashed") +
    geom_vline(data = Summary, aes(xintercept = mean_IVM), col = cols["Ivermectin"], linetype = "dashed") +
    geom_vline(data = Summary, aes(xintercept = mean_RGN), col = cols["Regeneron"], linetype = "dashed") +
    geom_vline(data = Summary, aes(xintercept = mean_RDS), col = cols["Remdesivir"], linetype = "dashed") +
    geom_vline(data = Summary, aes(xintercept = mean_FAV), col = cols["Favipiravir"], linetype = "dashed") +
    geom_vline(data = Summary, aes(xintercept = mean_MOL), col = cols["Molnupiravir"], linetype = "dashed") +
    geom_vline(data = Summary, aes(xintercept = mean_NIR), col = cols["Nirmatrelvir"], linetype = "dashed") +
  geom_text(data = Summary, mapping = aes(label = lab_p_val), x = 7, y = 0, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_nir), x = 7, y = 0.1, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_mol), x = 7, y = 0.2, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_flx), x = 7, y = 0.3, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_fav), x = 7, y = 0.4, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_rds), x = 7, y = 0.5, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_rgn), x = 7, y = 0.6, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_ivm), x = 7, y = 0.7, hjust = 0, vjust = 0, size = 3) +
  geom_text(data = Summary, mapping = aes(label = lab_nsd), x = 7, y = 0.8, hjust = 0, vjust = 0, size = 3) + 
  guides(colour = guide_legend(override.aes = list(linewidth=2)))
plot_ecdf_meta

```

```{r}
png("Plots/ecdf_meta.png", width = 12, height = 10, res = 300, units = "in")
plot_ecdf_meta
dev.off()
```
